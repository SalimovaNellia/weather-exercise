{"version":3,"sources":["serviceWorker.js","utils/temperatureConverter.js","components/WeatherCarousel.js","store/weatherCarousel/actions.js","components/DetailedWeather.js","utils/constants.js","model/Temperature.js","model/Weather.js","model/WeatherData.js","model/DayWeather.js","store/weather/actions.js","utils/groupBy.js","components/SwitchTemperatureUnit.js","store/switchTempUnit/actions.js","components/App.js","store/switchTempUnit/reducers.js","store/weatherCarousel/reducers.js","store/weather/reducers.js","store/reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","convertTemperatureList","days","unit","forEach","day","weatherArray","weatherData","weather","temperature","value","toFixed","WeatherCarousel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeActiveItem","activeItemIndex","setState","objectSpread","state","numberOfCards","document","documentElement","clientWidth","_this2","map","weatherList","index","react_default","a","createElement","Card","color","key","date","onClick","dispatch","type","payload","setActiveDay","style","cardStyle","CardHeader","title","titleTypographyProps","align","titleStyle","CardContent","Typography","component","variant","humidity","pressure","description","react_items_carousel_default","carouselWrapStyle","gutter","showSlither","firstAndLastGutter","freeScrolling","requestToChangeActive","activePosition","rightChevron","className","arrowStyle","leftChevron","outsideChevron","React","Component","marginBottom","fontSize","backgroundColor","borderBottom","connect","items","DetailedWeather","chartWidth","chartWrapStyle","es6","width","height","data","dataKey","YAxis","fill","PureComponent","display","justifyContent","API_KEY","Temperature","Weather","WeatherData","time","DayWeather","FETCH_WEATHER_BEGIN","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","fetchWeatherBegin","fetchWeatherSuccess","fetchWeatherFailure","error","handleErrors","response","ok","Error","statusText","fetchWeatherData","city","countryCode","fetch","concat","then","res","json","groupedDates","list","keyGetter","Map","item","collection","get","push","set","groupBy","dt_txt","split","dayWeatherArray","responseArray","convertedWeatherDataList","main","tempValue","temp","catch","SwitchTemperatureUnit","makeStyles","theme","group","padding","RadioGroup","onChange","event","target","aria-label","name","defaultValue","row","radioStyle","FormControlLabel","control","Radio","label","selectedDayWeatherIndex","weatherCarousel","selectedDateIndex","App","_this$props","loading","message","loadingWrapStyle","CircularProgress","components_SwitchTemperatureUnit","components_WeatherCarousel","components_DetailedWeather","alignItems","alignContent","switchTempUnit","root","temperatureUnit","initialState","combineReducers","arguments","length","undefined","action","__webpack_require__","d","__webpack_exports__","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,oKCVC,SAASC,EAAuBC,EAAMC,GAczC,OAbAD,EAAKE,QAAQ,SAAAC,GACTA,EAAIC,aAAaF,QAAQ,SAAAG,GACjBA,EAAYC,QAAQC,YAAYN,OAASA,IAC5B,MAATA,GACAI,EAAYC,QAAQC,YAAYN,KAAO,IACvCI,EAAYC,QAAQC,YAAYC,OAb9B,EAaiDH,EAAYC,QAAQC,YAAYC,MAb/E,EAAI,IAAIC,QAAQ,IAcJ,MAATR,IACPI,EAAYC,QAAQC,YAAYN,KAAO,IACvCI,EAAYC,QAAQC,YAAYC,OAZpB,GAYuCH,EAAYC,QAAQC,YAAYC,MAZ7E,IAAU,GAAGC,QAAQ,SAiBpCT,MCXLU,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAOVQ,iBAAmB,SAACC,GAAD,OAAqBR,EAAKS,SAALR,OAAAS,EAAA,EAAAT,CAAA,GAAkBD,EAAKW,MAAvB,CAA8BH,sBANlER,EAAKW,MAAQ,CACTH,gBAAiB,EACjBI,cAAeC,SAASC,gBAAgBC,YAAc,IAAM,EAAI,GAJrDf,wEAUV,IAAAgB,EAAAb,KACDc,EAAM9B,EAAuBgB,KAAKJ,MAAMmB,aAAaD,IAAI,SAACrB,EAAOuB,GAAR,OACzDC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAM,UAAUC,IAAK7B,EAAM8B,KAAMC,QAAS,kBAAMX,EAAKjB,MAAM6B,SCtBjD,SAACT,GACzB,MAAO,CACHU,KAJsB,iBAKtBC,QAASX,GDmBqEY,CAAaZ,KAASa,MAAOC,GACnGb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAYC,MAAOvC,EAAM8B,KAAMU,qBAAsB,CAACC,MAAO,UAAWL,MAAOM,IAC/ElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACInB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAYC,UAAU,IAAIC,QAAQ,YAAYlB,MAAM,eAApD,gBACkB5B,EAAMJ,aAAa,GAAGE,QAAQC,YAAYC,OAE5DwB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAYC,UAAU,IAAIC,QAAQ,YAAYlB,MAAM,eAApD,aACe5B,EAAMJ,aAAa,GAAGE,QAAQiD,UAE7CvB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAYC,UAAU,IAAIC,QAAQ,YAAYlB,MAAM,eAApD,aACe5B,EAAMJ,aAAa,GAAGE,QAAQkD,UAE7CxB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAYC,UAAU,IAAIC,QAAQ,YAAYlB,MAAM,eAApD,gBACkB5B,EAAMJ,aAAa,GAAGE,QAAQmD,iBAM5D,OACIzB,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CACIW,MAAOe,EACPnC,cAAeT,KAAKQ,MAAMC,cAC1BoC,OAAQ,GACRC,aAAa,EACbC,oBAAoB,EACpBC,eAAe,EAEfC,sBAAuBjD,KAAKI,iBAC5BC,gBAAiBL,KAAKQ,MAAMH,gBAC5B6C,eAAgB,SAEhBC,aAAclC,EAAAC,EAAAC,cAAA,KAAGiC,UAAU,iBAAiBvB,MAAOwB,GAArC,iBACdC,YAAarC,EAAAC,EAAAC,cAAA,KAAGiC,UAAU,iBAAiBvB,MAAOwB,GAArC,gBACbE,gBAAgB,GAEfzC,UAjDa0C,IAAMC,WAwD9Bb,EAAoB,CACtBc,aAAc,QAGZL,EAAa,CACfhC,MAAO,QACPsC,SAAU,QAIPxB,EAAa,CACZyB,gBAAiB,WAGnB9B,EAAY,CACd+B,aAAc,qBASHC,kBANf,SAAyBtD,GACrB,MAAO,CACHO,YAAaP,EAAMjB,QAAQwE,QAIpBD,CAAyBnE,mBEtFlCqE,cACF,SAAAA,EAAYpE,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAgE,GAAAlE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkE,GAAA7D,KAAAH,KACVJ,0EAIN,IAAMqE,EAAavD,SAASC,gBAAgBC,YAAc,IAAM,IAAM,IACtE,OACIK,EAAAC,EAAAC,cAAA,OAAKU,MAAOqC,GACRjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACIC,MAAOH,EACPI,OAAQ,IACRC,KAAMtE,KAAKJ,MAAMR,IAAIC,cAErB4B,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOI,QAAQ,SACftD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,MACAvD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAKI,QAAQ,4BAA4BE,KAAK,qBAhBpCC,iBAuBxBR,EAAiB,CACnBS,QAAS,OACTC,eAAgB,UASLd,oBAAUE,GCvCZa,EAAU,mCCAhB,IAAMC,EAET,SAAAA,EAAY5F,EAAMO,GAAQK,OAAAC,EAAA,EAAAD,CAAAE,KAAA8E,GACtB9E,KAAKP,MAAQA,EACbO,KAAKd,KAAOA,GCJP6F,EACT,SAAAA,EAAYvC,EAAUE,EAAaD,EAAUjD,GAAcM,OAAAC,EAAA,EAAAD,CAAAE,KAAA+E,GACvD/E,KAAKwC,SAAWA,EAChBxC,KAAK0C,YAAcA,EACnB1C,KAAKyC,SAAWA,EAChBzC,KAAKR,YAAcA,GCLdwF,EACT,SAAAA,EAAYC,EAAM1F,GAAUO,OAAAC,EAAA,EAAAD,CAAAE,KAAAgF,GACxBhF,KAAKiF,KAAOA,EACZjF,KAAKT,QAAUA,GCHV2F,EACT,SAAAA,EAAY3D,EAAMlC,GAAeS,OAAAC,EAAA,EAAAD,CAAAE,KAAAkF,GAC7BlF,KAAKuB,KAAOA,EACZvB,KAAKX,aAAeA,GCIf8F,EAAwB,sBACxBC,EAAwB,wBACxBC,EAAwB,wBAExBC,EAAoB,iBAAO,CACpC5D,KAAMyD,IAGGI,EAAsB,SAAAxE,GAAW,MAAK,CAC/CW,KAAM0D,EACNzD,QAAS,CAAEZ,iBAGFyE,EAAsB,SAAAC,GAAK,MAAK,CACzC/D,KAAM2D,EACN1D,QAAS,CAAE8D,WAIf,SAASC,EAAaC,GAClB,IAAKA,EAASC,GACV,MAAMC,MAAMF,EAASG,YAEzB,OAAOH,EAGJ,SAASI,EAAiBC,EAAMC,GACnC,OAAO,SAAAxE,GAEH,OADAA,EAAS6D,KACFY,MAAK,qDAAAC,OAAsDH,EAAtD,KAAAG,OAA8DF,EAA9D,WAAAE,OAAmFtB,EAAnF,YACPuB,KAAKV,GACLU,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACF,IAAMC,ECxCf,SAAiBC,EAAMC,GAC1B,IAAM3F,EAAM,IAAI4F,IAUhB,OATAF,EAAKrH,QAAQ,SAACwH,GACV,IAAMrF,EAAMmF,EAAUE,GAChBC,EAAa9F,EAAI+F,IAAIvF,GACtBsF,EAGDA,EAAWE,KAAKH,GAFhB7F,EAAIiG,IAAIzF,EAAK,CAACqF,MAKf7F,ED6B0BkG,CAAQV,EAAKE,KAAM,SAAAG,GAAI,OAAIA,EAAKM,OAAOC,MAAM,KAAK,KAC7DC,EAAkB,GAiB5B,OAhBIZ,EAAapH,QAAQ,SAACiI,EAAe9F,GACjC,IAAI+F,EAA2BD,EAActG,IAAI,SAAA6F,GAC7C,IAAI1B,EAAO0B,EAAKM,OAAOC,MAAM,KAAK,GAC9B1E,EAAWmE,EAAKW,KAAK9E,SACrBE,EAAciE,EAAKpH,QAAQ,GAAGmD,YAC9BD,EAAWkE,EAAKW,KAAK7E,SACrB8E,EAAYZ,EAAKW,KAAKE,KAEtBhI,EAAc,IAAIsF,EAAY,KAAkB,EAAZyC,EAAgB,EAAI,QAAQ7H,QAAQ,IACxEH,EAAU,IAAIwF,EAAQvC,EAAUE,EAAaD,EAAUjD,GAC3D,OAAO,IAAIwF,EAAYC,EAAM1F,KAErC4H,EAAgBL,KAAK,IAAI5B,EAAW5D,EAAK+F,MAG7C5F,EAAS8D,EAAoB4B,IACtBA,IAEVM,MAAM,SAAAhC,GAAK,OAAIhE,EAAS+D,EAAoBC,+CE1CnDiC,SAPYC,GAAW,SAAAC,GAAK,MAAK,CACnCC,MAAO,CACHjD,eAAgB,SAChBkD,QAAS,uBAKb,SAAAJ,EAAY9H,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAA0H,GAAA5H,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4H,GAAAvH,KAAAH,KACVJ,0EAGD,IAAAC,EAAAG,KACL,OACIiB,EAAAC,EAAAC,cAAC4G,EAAA,EAAD,CAAYC,SAAW,SAAAC,GACnBpI,EAAKD,MAAM6B,SCvBhB,CACHC,KAJ+B,0BAK/BC,QDqBkDsG,EAAMC,OAAOzI,SAE/C0I,aAAW,mBACXC,KAAK,iBACLC,aAAa,IACbC,KAAG,EACHzG,MAAO0G,GAEftH,EAAAC,EAAAC,cAACqH,EAAA,EAAD,CAAkB/I,MAAM,IACNgJ,QAASxH,EAAAC,EAAAC,cAACuH,EAAA,EAAD,CAAOrH,MAAM,YACtBsH,MAAM,YAExB1H,EAAAC,EAAAC,cAACqH,EAAA,EAAD,CAAkB/I,MAAM,IACNgJ,QAASxH,EAAAC,EAAAC,cAACuH,EAAA,EAAD,CAAOrH,MAAM,YACtBsH,MAAM,uBAtBJnF,IAAMC,YA6BpC8E,EAAa,CACf3D,eAAgB,SAChBkD,QAAS,QASEhE,cANS,SAACtD,GACrB,MAAO,CACHoI,wBAAyBpI,EAAMqI,gBAAgBC,oBAIxChF,CAAyB4D,YE/ClCqB,8LAEE/I,KAAKJ,MAAM6B,SAASsE,EAAiB/F,KAAKJ,MAAMoG,KAAMhG,KAAKJ,MAAMqG,+CAI5D,IAAA+C,EACoBhJ,KAAKJ,MAAvB6F,EADFuD,EACEvD,MAAOwD,EADTD,EACSC,QAEd,OAAIxD,EACOxE,EAAAC,EAAAC,cAAA,qBAAasE,EAAMyD,SAG1BD,EACOhI,EAAAC,EAAAC,cAAA,OAAKU,MAAOsH,IACflI,EAAAC,EAAAC,cAACiI,EAAA,EAAD,CAAkB/H,MAAM,aAK5BJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACkI,EAAD,MACApI,EAAAC,EAAAC,cAACmI,EAAD,CAAiBlK,IAAKY,KAAKJ,MAAMmB,YAAYf,KAAKJ,MAAMgJ,2BACxD3H,EAAAC,EAAAC,cAACoI,EAAD,CAAiBnK,IAAKY,KAAKJ,MAAMmB,YAAYf,KAAKJ,MAAMgJ,mCAvBtDpF,IAAMC,WA8BlB0F,GAAmB,CACrBxE,QAAS,OACT6E,WAAY,SACZC,aAAa,SACb7E,eAAgB,SAChBP,OAAQ,SAgBGP,eAbS,SAACtD,GACrB,IAAMO,EAAc/B,EAAuBwB,EAAMjB,QAAQwE,MAAOvD,EAAMkJ,eAAexK,MAErF,MAAO,CACH8G,KAAMxF,EAAMmJ,KAAK3D,KACjBC,YAAazF,EAAMmJ,KAAK1D,YACxB2D,gBAAiBpJ,EAAMkJ,eAAexK,KACtC+J,QAASzI,EAAMjB,QAAQ0J,QACvBlI,YAAaA,EACb6H,wBAAyBpI,EAAMqI,gBAAgBC,oBAIxChF,CAAyBiF,YC5DlCc,GAAe,CACjB3K,KAAM,KCDJ2K,GAAe,CACjBf,kBAAmB,GCDjBe,GAAe,CACjB9F,MAAO,GACPkF,SAAS,EACTxD,MAAO,MCAX,IAAMoE,GAAe,CACjB7D,KAAM,SACNC,YAAa,MAOF6D,gBAAgB,CAC3BH,KALgB,WAAkC,IAAjCnJ,EAAiCuJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBF,GAAyBE,UAAAC,OAAA,GAAAD,UAAA,GAClD,OAAOvJ,GAKPjB,QDRW,WAAsD,IAA9BiB,EAA8BuJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBF,GAAcK,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACjE,OAAOC,EAAOxI,MACV,KAAKyD,EACD,OAAOrF,OAAAS,EAAA,EAAAT,CAAA,GACAU,EADP,CAEIyI,SAAS,EACTxD,MAAO,OAGf,KAAKL,EACD,OAAOtF,OAAAS,EAAA,EAAAT,CAAA,GACAU,EADP,CAEIyI,SAAS,EACTlF,MAAOmG,EAAOvI,QAAQZ,cAG9B,KAAKsE,EACD,OAAOvF,OAAAS,EAAA,EAAAT,CAAA,GACAU,EADP,CAEIyI,SAAS,EACTxD,MAAOyE,EAAOvI,QAAQ8D,MACtB1B,MAAO,KAEf,QACI,OAAOvD,ICffkJ,eHXiC,WAAkC,IAAjClJ,EAAiCuJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBF,GAAcK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnE,OAAQC,EAAOxI,MACX,IFR+B,0BES3B,OAAO5B,OAAAS,EAAA,EAAAT,CAAA,GAAIU,EAAX,CAAkBtB,KAAMgL,EAAOvI,UAGvC,OAAOnB,GGMPqI,gBFZkC,WAAkC,IAAjCrI,EAAiCuJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBF,GAAcK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpE,OAAQC,EAAOxI,MACX,IbRsB,iBaSlB,OAAO5B,OAAAS,EAAA,EAAAT,CAAA,GAAIU,EAAX,CAAkBsI,kBAAmBoB,EAAOvI,UAGpD,OAAOnB,eGZX2J,EAAAC,EAAAC,EAAA,0BAAAC,KASO,IAAMA,GAAQC,aAAYC,GAAaC,aAAgBC,OAE9DC,IAASC,OACL3J,EAAAC,EAAAC,cAAC0J,EAAA,EAAD,CAAUP,MAAOA,IACbrJ,EAAAC,EAAAC,cAAC2J,GAAD,OACSpK,SAASqK,eAAe,SnBmHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9E,KAAK,SAAA+E,GACjCA,EAAaC","file":"static/js/main.c89aeba8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export function convertToF(celsius) {\r\n    return (celsius * 9/5 + 32).toFixed(2);\r\n}\r\n\r\nexport function convertToC(fahrenheit) {\r\n    return ((fahrenheit - 32) * 5 / 9).toFixed(2);\r\n}\r\n\r\nexport function convertTemperatureList(days, unit) {\r\n    days.forEach(day => {\r\n        day.weatherArray.forEach(weatherData => {\r\n            if (weatherData.weather.temperature.unit !== unit){\r\n                if (unit === \"F\"){\r\n                    weatherData.weather.temperature.unit = \"F\";\r\n                    weatherData.weather.temperature.value = convertToF(weatherData.weather.temperature.value);\r\n                } else if (unit === \"C\"){\r\n                    weatherData.weather.temperature.unit = \"C\";\r\n                    weatherData.weather.temperature.value = convertToC(weatherData.weather.temperature.value);\r\n                }\r\n            }\r\n        })\r\n    });\r\n    return days;\r\n}\r\n","import React from 'react';\r\nimport ItemsCarousel from 'react-items-carousel';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport {Card} from \"@material-ui/core\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {connect} from \"react-redux\";\r\nimport {setActiveDay} from \"../store/weatherCarousel/actions\";\r\nimport {convertTemperatureList} from \"../utils/temperatureConverter\";\r\n\r\n\r\nclass WeatherCarousel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeItemIndex: 0,\r\n            numberOfCards: document.documentElement.clientWidth > 700 ? 3 : 2\r\n        };\r\n    }\r\n\r\n    changeActiveItem = (activeItemIndex) => this.setState({...this.state, activeItemIndex});\r\n\r\n    render() {\r\n        let map = convertTemperatureList(this.props.weatherList).map((value, index) =>\r\n            <Card color=\"primary\" key={value.date} onClick={() => this.props.dispatch(setActiveDay(index))} style={cardStyle}>\r\n                <CardHeader title={value.date} titleTypographyProps={{align: 'center'}} style={titleStyle}/>\r\n                <CardContent>\r\n                    <Typography component=\"p\" variant=\"subtitle1\" color=\"textPrimary\">\r\n                        Temperature: {value.weatherArray[0].weather.temperature.value}\r\n                    </Typography>\r\n                    <Typography component=\"p\" variant=\"subtitle1\" color=\"textPrimary\">\r\n                        Humidity: {value.weatherArray[0].weather.humidity}\r\n                    </Typography>\r\n                    <Typography component=\"p\" variant=\"subtitle1\" color=\"textPrimary\">\r\n                        Pressure: {value.weatherArray[0].weather.pressure}\r\n                    </Typography>\r\n                    <Typography component=\"p\" variant=\"subtitle1\" color=\"textPrimary\">\r\n                        Description: {value.weatherArray[0].weather.description}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n\r\n        return (\r\n            <ItemsCarousel\r\n                style={carouselWrapStyle}\r\n                numberOfCards={this.state.numberOfCards}\r\n                gutter={12}\r\n                showSlither={true}\r\n                firstAndLastGutter={true}\r\n                freeScrolling={false}\r\n\r\n                requestToChangeActive={this.changeActiveItem}\r\n                activeItemIndex={this.state.activeItemIndex}\r\n                activePosition={'center'}\r\n\r\n                rightChevron={<i className=\"material-icons\" style={arrowStyle}>chevron_right</i>}\r\n                leftChevron={<i className=\"material-icons\" style={arrowStyle}>chevron_left</i>}\r\n                outsideChevron={false}\r\n            >\r\n                {map}\r\n            </ItemsCarousel>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst carouselWrapStyle = {\r\n    marginBottom: '50px'\r\n};\r\n\r\nconst arrowStyle = {\r\n    color: 'black',\r\n    fontSize: '48px'\r\n};\r\n\r\n\r\nconst  titleStyle = {\r\n        backgroundColor: '#e8eaf6'\r\n};\r\n\r\nconst cardStyle = {\r\n    borderBottom: '1px solid #e8eaf6'\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        weatherList: state.weather.items\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(WeatherCarousel)\r\n","export const SET_ACTIVE_DAY = 'SET_ACTIVE_DAY';\r\n\r\nexport const setActiveDay = (index) => {\r\n    return {\r\n        type: SET_ACTIVE_DAY,\r\n        payload: index\r\n    };\r\n};\r\n","import React, {PureComponent} from 'react';\r\nimport {BarChart, Bar, XAxis} from 'recharts';\r\nimport {connect} from \"react-redux\";\r\nimport YAxis from \"recharts/es6/cartesian/YAxis\";\r\n\r\nclass DetailedWeather extends PureComponent {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        const chartWidth = document.documentElement.clientWidth > 700 ? 650 : 300;\r\n        return (\r\n            <div style={chartWrapStyle}>\r\n                <BarChart\r\n                    width={chartWidth}\r\n                    height={300}\r\n                    data={this.props.day.weatherArray}\r\n                >\r\n                    <XAxis dataKey=\"time\"/>\r\n                    <YAxis />\r\n                    <Bar dataKey=\"weather.temperature.value\" fill=\"#3f51b5\"/>\r\n                </BarChart>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst chartWrapStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        weatherList: state.weather.items,\r\n        selectedDayWeatherIndex: state.weatherCarousel.selectedDateIndex\r\n    }\r\n}\r\nexport default connect()(DetailedWeather)\r\n","export const API_KEY = \"4b1bbc84bd3dfb402c08b77ff66bf789\";\r\n","export class Temperature {\r\n\r\n    constructor(unit, value) {\r\n        this.value = value;\r\n        this.unit = unit;\r\n    }\r\n\r\n}\r\n","export class Weather {\r\n    constructor(humidity, description, pressure, temperature) {\r\n        this.humidity = humidity;\r\n        this.description = description;\r\n        this.pressure = pressure;\r\n        this.temperature = temperature;\r\n    }\r\n}\r\n","export class WeatherData {\r\n    constructor(time, weather) {\r\n        this.time = time;\r\n        this.weather = weather;\r\n    }\r\n}\r\n","export class DayWeather {\r\n    constructor(date, weatherArray) {\r\n        this.date = date;\r\n        this.weatherArray = weatherArray;\r\n    }\r\n}\r\n","import {API_KEY} from \"../../utils/constants\";\r\nimport {groupBy} from \"../../utils/groupBy\";\r\nimport {Temperature} from \"../../model/Temperature\";\r\nimport {Weather} from \"../../model/Weather\";\r\nimport {WeatherData} from \"../../model/WeatherData\";\r\nimport {DayWeather} from \"../../model/DayWeather\";\r\n\r\nexport const FETCH_WEATHER_BEGIN   = 'FETCH_WEATHER_BEGIN';\r\nexport const FETCH_WEATHER_SUCCESS = 'FETCH_WEATHER_SUCCESS';\r\nexport const FETCH_WEATHER_FAILURE = 'FETCH_WEATHER_FAILURE';\r\n\r\nexport const fetchWeatherBegin = () => ({\r\n    type: FETCH_WEATHER_BEGIN\r\n});\r\n\r\nexport const fetchWeatherSuccess = weatherList => ({\r\n    type: FETCH_WEATHER_SUCCESS,\r\n    payload: { weatherList }\r\n});\r\n\r\nexport const fetchWeatherFailure = error => ({\r\n    type: FETCH_WEATHER_FAILURE,\r\n    payload: { error }\r\n});\r\n\r\n\r\nfunction handleErrors(response) {\r\n    if (!response.ok) {\r\n        throw Error(response.statusText);\r\n    }\r\n    return response;\r\n}\r\n\r\nexport function fetchWeatherData(city, countryCode) {\r\n    return dispatch => {\r\n        dispatch(fetchWeatherBegin());\r\n        return fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city},${countryCode}&appid=${API_KEY}&cnt=40`)\r\n            .then(handleErrors)\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                const groupedDates = groupBy(json.list, item => item.dt_txt.split(\" \")[0]);\r\n                    const dayWeatherArray = [];\r\n                    groupedDates.forEach((responseArray, key) => {\r\n                        let convertedWeatherDataList = responseArray.map(item => {\r\n                            let time = item.dt_txt.split(\" \")[1];\r\n                            let humidity = item.main.humidity;\r\n                            let description = item.weather[0].description;\r\n                            let pressure = item.main.pressure;\r\n                            let tempValue = item.main.temp;\r\n                            // converting Kelvin to Fahrenheit\r\n                            let temperature = new Temperature(\"F\", (tempValue * 9 / 5 - 459.67).toFixed(2));\r\n                            let weather = new Weather(humidity, description, pressure, temperature);\r\n                            return new WeatherData(time, weather);\r\n                        });\r\n                    dayWeatherArray.push(new DayWeather(key, convertedWeatherDataList));\r\n                });\r\n\r\n                dispatch(fetchWeatherSuccess(dayWeatherArray));\r\n                return dayWeatherArray;\r\n            })\r\n            .catch(error => dispatch(fetchWeatherFailure(error)));\r\n    };\r\n}\r\n","export function groupBy(list, keyGetter) {\r\n    const map = new Map();\r\n    list.forEach((item) => {\r\n        const key = keyGetter(item);\r\n        const collection = map.get(key);\r\n        if (!collection) {\r\n            map.set(key, [item]);\r\n        } else {\r\n            collection.push(item);\r\n        }\r\n    });\r\n    return map;\r\n}\r\n","import RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport React from \"react\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {switchTemperatureUnit} from \"../store/switchTempUnit/actions\";\r\nimport {store} from \"../index\";\r\nimport {connect} from \"react-redux\";\r\nimport {setActiveDay} from \"../store/weatherCarousel/actions\";\r\nimport {convertTemperatureList} from \"../utils/temperatureConverter\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    group: {\r\n        justifyContent: \"center\",\r\n        padding: \"30px\"\r\n    },\r\n}));\r\n\r\nclass SwitchTemperatureUnit extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <RadioGroup onChange={(event => {\r\n                this.props.dispatch(switchTemperatureUnit(event.target.value));\r\n            })}\r\n                        aria-label=\"Switch temp unit\"\r\n                        name=\"switchTempUnit\"\r\n                        defaultValue=\"F\"\r\n                        row\r\n                        style={radioStyle}\r\n            >\r\n                <FormControlLabel value=\"C\"\r\n                                  control={<Radio color=\"primary\"/>}\r\n                                  label=\"Celsius\"\r\n                />\r\n                <FormControlLabel value=\"F\"\r\n                                  control={<Radio color=\"primary\"/>}\r\n                                  label=\"Fahrenheit\"\r\n                />\r\n            </RadioGroup>\r\n        )\r\n    }\r\n}\r\n\r\nconst radioStyle = {\r\n    justifyContent: 'center',\r\n    padding: '50px'\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selectedDayWeatherIndex: state.weatherCarousel.selectedDateIndex\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(SwitchTemperatureUnit);\r\n\r\n\r\n","export const SWITCH_TEMPERATURE_UNIT = 'SWITCH_TEMPERATURE_UNIT';\r\n\r\nexport const switchTemperatureUnit = (unit) => {\r\n    return {\r\n        type: SWITCH_TEMPERATURE_UNIT,\r\n        payload: unit\r\n    };\r\n};\r\n","import React from \"react\";\nimport WeatherCarousel from \"./WeatherCarousel\";\nimport {connect} from \"react-redux\";\nimport DetailedWeather from \"./DetailedWeather\";\nimport {fetchWeatherData} from \"../store/weather/actions\";\nimport SwitchTemperatureUnit from \"./SwitchTemperatureUnit\";\nimport {convertTemperatureList} from \"../utils/temperatureConverter\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { HashRouter } from 'react-router-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.dispatch(fetchWeatherData(this.props.city, this.props.countryCode));\n    }\n\n\n    render() {\n        const {error, loading} = this.props;\n\n        if (error) {\n            return <div>Error! {error.message}</div>;\n        }\n\n        if (loading) {\n            return <div style={loadingWrapStyle}>\n                <CircularProgress color=\"primary\"/>\n            </div>;\n        }\n\n        return (\n            <div>\n                <SwitchTemperatureUnit/>\n                <WeatherCarousel day={this.props.weatherList[this.props.selectedDayWeatherIndex]}/>\n                <DetailedWeather day={this.props.weatherList[this.props.selectedDayWeatherIndex]}/>\n            </div>\n        )\n    }\n}\n\n\nconst loadingWrapStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    alignContent:'center',\n    justifyContent: 'center',\n    height: '100vh'\n}\n\nconst mapStateToProps = (state) => {\n    const weatherList = convertTemperatureList(state.weather.items, state.switchTempUnit.unit);\n\n    return {\n        city: state.root.city,\n        countryCode: state.root.countryCode,\n        temperatureUnit: state.switchTempUnit.unit,\n        loading: state.weather.loading,\n        weatherList: weatherList,\n        selectedDayWeatherIndex: state.weatherCarousel.selectedDateIndex\n    }\n};\n\nexport default connect(mapStateToProps)(App)\n","import {SWITCH_TEMPERATURE_UNIT} from \"./actions\";\r\n\r\nconst initialState = {\r\n    unit: \"F\"\r\n};\r\n\r\nexport const switchTempUnitReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_TEMPERATURE_UNIT: {\r\n            return {...state, unit: action.payload};\r\n        }\r\n    }\r\n    return state;\r\n};\r\n","import {SET_ACTIVE_DAY} from \"./actions\";\r\n\r\nconst initialState = {\r\n    selectedDateIndex: 0,\r\n};\r\n\r\nexport const weatherCarouselReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_ACTIVE_DAY: {\r\n            return {...state, selectedDateIndex: action.payload};\r\n        }\r\n    }\r\n    return state;\r\n};\r\n","import {FETCH_WEATHER_BEGIN, FETCH_WEATHER_FAILURE, FETCH_WEATHER_SUCCESS} from \"./actions\";\r\n\r\nconst initialState = {\r\n    items: [],\r\n    loading: true,\r\n    error: null\r\n};\r\n\r\nexport default function weatherReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case FETCH_WEATHER_BEGIN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: null\r\n            };\r\n\r\n        case FETCH_WEATHER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                items: action.payload.weatherList\r\n            };\r\n\r\n        case FETCH_WEATHER_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload.error,\r\n                items: []\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport {switchTempUnitReducer} from \"./switchTempUnit/reducers\";\r\nimport {weatherCarouselReducer} from \"./weatherCarousel/reducers\";\r\nimport weatherReducer from \"./weather/reducers\";\r\n\r\nconst initialState = {\r\n    city: \"Munich\",\r\n    countryCode: \"DE\"\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    return state;\r\n};\r\n\r\nexport default combineReducers({\r\n    root: rootReducer,\r\n    weather: weatherReducer,\r\n    switchTempUnit: switchTempUnitReducer,\r\n    weatherCarousel: weatherCarouselReducer\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./components/App\";\nimport {createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./store/reducers\";\nimport thunk from \"redux-thunk\";\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'),\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}